generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  birthDay     DateTime
  photo        String?       @default("")
  phone        String
  password     String
  active       Boolean       @default(true)
  address      Address?
  bankAccounts BankAccount[]
  bankSlips    BankSlip[]
  cash         Cash?
  creditCards  CreditCard[]
  investments  Investment[]
  transactions Transaction[]
  incomes      Income[]
  expenses     Expense[]
}

model Income {
  id          String   @id @default(uuid())
  description String?
  amount      Float
  date        DateTime
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model Expense {
  id          String   @id @default(uuid())
  description String?
  amount      Float
  date        DateTime
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model Address {
  id         String  @id @default(uuid())
  cep        String
  complement String? @default("")
  number     String? @default("")
  userId     String? @unique
  user       User?   @relation(fields: [userId], references: [id])
}

model BankAccount {
  id                String        @id @default(uuid())
  bank              BankEnum
  accountNumber     String
  agency            String
  balance           Float         @default(0)
  user              User          @relation(fields: [userId], references: [id])
  userId            String
  transactions      Transaction[]
  senderTransfers   Transfer[]    @relation("senderTransfers")
  receiverTransfers Transfer[]    @relation("receiverTransfers")
}

model CreditCard {
  id     String @id @default(uuid())
  name   String
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

enum BankEnum {
  BRADESCO
  ITAU
  CAIXA
  BANCOBRASIL
  NUBANK
  SANTANDER
  INTER
  ORIGINAL
  C6
  BMG
}

model Transaction {
  id            String              @id @default(uuid())
  type          TransactionType
  amount        Float
  description   String
  date          DateTime
  userId        String
  categoryId    String
  bankAccountId String              @map("bank_account_id")
  bankAccount   BankAccount         @relation(fields: [bankAccountId], references: [id])
  category      TransactionCategory @relation(fields: [categoryId], references: [id])
  user          User                @relation(fields: [userId], references: [id])
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
  WITHDRAWAL
  DEPOSIT
  CRYPTO
}

model TransactionCategory {
  id           String          @id @default(uuid())
  name         String
  type         TransactionType
  transactions Transaction[]
}

model Transfer {
  id         String      @id @default(uuid())
  senderId   String
  receiverId String
  amount     Float
  date       DateTime
  sender     BankAccount @relation("senderTransfers", fields: [senderId], references: [id])
  receiver   BankAccount @relation("receiverTransfers", fields: [receiverId], references: [id])
}

model Invoice {
  id       String    @id @default(uuid())
  amount   Float
  dueDate  DateTime
  paid     Boolean   @default(false)
  category String
  payments Payment[]
}

model Payment {
  id         String    @id @default(uuid())
  amount     Float
  date       DateTime
  invoiceId  String
  bankSlipId String?
  bankSlip   BankSlip? @relation(fields: [bankSlipId], references: [id])
  invoice    Invoice   @relation(fields: [invoiceId], references: [id])
}

model BankSlip {
  id       String    @id @default(uuid())
  number   String
  value    Float
  dueDate  DateTime
  paid     Boolean   @default(false)
  payerId  String
  payer    User      @relation(fields: [payerId], references: [id])
  payments Payment[]
}

model Investment {
  id             String                  @id @default(uuid())
  name           String
  description    String
  amountInvested Float                   @default(0)
  currentValue   Float                   @default(0)
  user           User                    @relation(fields: [userId], references: [id])
  userId         String
  transactions   InvestmentTransaction[]
  categoryId     String
  category       InvestmentCategory      @relation(fields: [categoryId], references: [id])
}

model InvestmentTransaction {
  id           String          @id @default(uuid())
  type         TransactionType
  amount       Float
  description  String
  date         DateTime
  investmentId String
  investment   Investment      @relation(fields: [investmentId], references: [id])
}

model InvestmentCategory {
  id          String       @id @default(uuid())
  name        String
  investments Investment[]
}

model Cash {
  id     String @id @default(uuid())
  amount Float  @default(0) @map("amount")
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}
